[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#auto_recache = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
  " neosnippet
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neco-syntax'

# [[plugins]]
# repo = 'Yggdroot/indentLine'
# if = 0
# hook_add = '''
#   let g:indentLine_color_term = 239
#   let g:indentLine_char_list = ['|', '¦', '┆', '┊']
#   let g:indentLine_enabled = 1
# '''

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeShowBookmarks=1
  let g:NERDTreeShowHidden = 1
  let g:NERDTreeDirArrows = 1
  let NERDTreeIgnore = ['\.git$', 'node_modules']

  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  map <C-a> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'mg979/vim-visual-multi'

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
  let closetag_filenames = '*.html,*.xhtml,*.php,*.vue'
  let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.vue'
  let g:closetag_filetypes = 'html,xhtml,php,vue'
  let g:closetag_xhtml_filetypes = 'xhtml,jsx,vue'
  let g:closetag_emptyTags_caseSensitive = 1
  let g:closetag_shortcut = '>'
  let g:closetag_close_shortcut = '<leader>>'
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'vue']
hook_add = '''
  imap ,, <C-y>,
  let g:user_emmet_settings = {
  \   'lang' : 'ja'
  \ }
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

#[[plugins]]
#repo = 'prettier/vim-prettier'
#build = 'yarn install'
#on_ft = ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'lua', 'php', 'python', 'ruby', 'html', 'swift']
#hook_add = '''
#  let g:prettier#exec_cmd_path = "/usr/local/bin/prettier"
#
#  " prettier
#  augroup fixprettier
#    au!
#    let g:prettier#autoformat = 0
#    let g:prettier#quickfix_enabled = 0
#    au BufwritePre *.js,*.jsx,*.ts,*.css,*.json,*.md,*.vue,*.yaml,*.html,*.php PrettierAsync
#  augroup End
#'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''

  " fixer
  " ale_fixerに登録されているもののみ
  let g:ale_fix_on_save = 0

  " lint
  let g:ale_linters = {
  \   'javascript': ['tsserver'],
  \   'vue': ['vetur'],
  \   'css': ['stylelint'],
  \   'php': ['intelephense'],
  \   'eruby': [],
  \   'ruby': ['rubocop', 'solargraph', 'ruby']
  \}

  " ale_lintersに登録されているもののみ
  let g:ale_linters_explicit = 1

  " 行数の左に常にマーク用領域を表示
  let g:ale_sign_column_always = 1
  " lint結果のマーク
  let g:ale_sign_error = '!!'
  let g:ale_sign_warning = '=='
  " 保存時実行
  let g:ale_lint_on_save = 1
  " 警告パネルの表示でなくquickfixを実行する
  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  " 警告パネルを表示
  let g:ale_open_list = 1
  " エラーと警告がなくなっても開いたままにする
  let g:ale_keep_list_window_open = 0 

  " eslint
  let g:ale_javascript_eslint_options = '--ignore-pattern "!.eslintrc.js --ignore-pattern "!prettier.config.js"'
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_conceal_code_blocks = 0
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
  autocmd FileType vue syntax sync fromstart
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  " 定義ジャンプ等のキーバインドを無効
  let g:go_def_mapping_enabled = 0
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
on_i = 1
merged = '0'
hook_add = '''
  let g:coc_node_path = '/usr/local/bin/node'
  nnoremap <silent><leader>cl :CocList extensions<CR>

  " golang
  autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
'''

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
 
###fzf.vim
[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'jpo/vim-railscasts-theme'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  autocmd VimEnter * nested colorscheme railscasts
'''

[[plugins]]
repo = 'neoclide/coc-tabnine'

